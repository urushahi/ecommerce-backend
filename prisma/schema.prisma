// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERD
  CANCELLED
}

model User {
  id                     Int    @id @default(autoincrement())
  name                   String
  email                  String @unique
  password               String
  role                   Role   @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  CartItem  CartItem[]
  Order     Order[]

  @@map("users")
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String         @db.Text
  price        Decimal
  tag          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItem     CartItem[]
  OrderProduct OrderProduct[]

  @@fulltext([name, description, tag])
  
  @@map("products")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]

  @@map("address")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  @@map("cart_items")
}

model Order {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  products OrderProduct[]
  events   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
